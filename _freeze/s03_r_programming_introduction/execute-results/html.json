{
  "hash": "1932f6084913c00f6a6da587f972dbae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working in R & RStudio\n---\n\n\n\n\n:::{.callout-tip}\n## Learning Objectives\n\n-   Get oriented with the RStudio interface\n-   Run code and basic arithmetic in the Console\n-   Practice writing code in an R Script\n-   Be introduced to built-in R functions\n-   Use the Help pages to look up function documentation\n:::\n\n::: Acknowledgements\nThis lesson is a combination of excellent lessons by others. Huge thanks to [Julie Lowndes](https://jules32.github.io/) for writing most of this content and letting us build on her material, which in turn was built on [Jenny Bryan's](https://jennybryan.org/about/) materials. We highly recommend reading through the original lessons and using them as reference (see in the resources section below).\n:::\n\n## Welcome to R Programming\n\n![Artwork by Allison Horst](images/r_programming_introduction/allison-horst-code-kitchen.png)\n\nThere is a vibrant community out there that is collectively developing increasingly easy to use and powerful open source programming tools. The changing landscape of programming is making learning how to code easier than it ever has been. Incorporating programming into analysis workflows not only makes science more efficient, but also more computationally reproducible. In this course, we will use the programming language R, and the accompanying integrated development environment (IDE) RStudio. R is a great language to learn for data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source.\n\nSo what is the difference between R and RStudio? Here is an analogy to start us off. Imagine you are a chef, and you have to prepare a meal.  You'll need a place to work (a kitchen), you'll need some tools (pots, pans, a knife, etc), and you'll need some ingredients.  In this analogy, **R is a good chef's knife** - one of the most important tools that you'll use to accomplish your task.\n\nAnd **if R is your chef's knife, RStudio is your kitchen**. RStudio provides a place to do your work! RStudio makes your life as a researcher easier by bringing together other tools you need to do your work efficiently - like a file browser, data viewer, help pages, terminal, community, support, the list goes on. So it's not just the infrastructure (the user interface or IDE), although it is a great way to learn and interact with your variables, files, and interact directly with git. It's also data science philosophy, R packages, community, and more. \n\n(and in this analogy, your ingredients are **data**!)\n\n::: {.callout-warning}\n### R without RStudio?\n\nJust as you can prepare food without a kitchen, we could learn R without RStudio, but that's not what we're going to do.  RStudio makes it much easier to work with R, just as a well stocked kitchen makes cooking more fun.  We are going to take advantage of the great RStudio support, and learn R and RStudio together.\n:::\n\n:::{.callout-note}\n\n### New to coding? new to R? No worries!\n\nSomething else to start us off is to mention that you are learning a new language here. It's an ongoing process, it takes time, you'll make mistakes, it can be frustrating, but it will be overwhelmingly awesome in the long run. We all speak at least one language; it's a similar process, really. And no matter how fluent you are, you'll always be learning, you'll be trying things in new contexts, learning words that mean the same as others, etc, just like everybody else. And just like any form of communication, there will be miscommunication that can be frustrating, but hands down we are all better off because of it.\n\nWhile language is a familiar concept, programming languages are in a different context from spoken languages and you will understand this context with time. For example: you have a concept that there is a first meal of the day, and there is a name for that: in English it's \"breakfast.\" So if you're learning Spanish, you could expect there is a word for this concept of a first meal. (And you'd be right: \"desayuno\"). We will get you to expect that programming languages also have words (called functions) for concepts as well. You'll soon expect that there is a way to order values numerically. Or alphabetically. Or search for patterns in text. Or calculate the median. Or reorganize columns to rows. Or subset exactly what you want. We will get you to increase your expectations and learn to ask and find what you're looking for.\n:::\n\n## Using R within the RStudio IDE\n\nLet's take a tour of the RStudio interface.\n\n[Full Screen](slides/r_programming_introduction/slides1_coding_in_console.html)\n\n\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"slides/r_programming_introduction/slides1_coding_in_console.html\" style=\"border: 1px solid #2e3846;\"></iframe>\n```\n\n\n\n\n\n### Objects in R\n\nLet's say the value of 12 that we got from running `3 * 4` is a really important value we need to keep. To keep information in R, we need to create an **object**. The way information is stored in R is through objects.\n\nWe can assign a value of a mathematical operation (and more!) to an object in R using the assignment operator, `<-` (greater than sign and minus sign). All objects in R are created using the assignment operator, following this form: `object_name <- value`.\n\n::: {.callout-exercise}\n\n**Create an object!**\n\nAssign your favorite number to an object called `fave_num`.  Then, create an object called `fave_squared` and assign the square of `fave_num` (use the superscript, like `5^2`), and inspect the object.\n\n::: {.callout-answer}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### think of this code as someone saying \"fave_num gets 42\".\nfave_num <- 42\n\n### and then square it\nfave_squared <- fave_num^2\nfave_squared\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1764\n```\n\n\n:::\n:::\n\n\n\n\nNotice how after creating the `fave_num` object, R doesn't print anything. However, we know our code worked because we see the object, and the value we wanted to store is now visible in our **Global Environment**. We can force R to print the value of the object by calling the object name (aka typing it out) or by using parentheses.\n:::\n\n:::\n\n\n::: {.callout-tip}\n#### Quick Tip\n\nWhen you begin typing an object name RStudio will automatically show suggested completions for you that you can select by hitting `tab`, then press `return`.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### printing the object by calling the object name\nfave_squared\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1764\n```\n\n\n:::\n\n```{.r .cell-code}\n### printing the object by wrapping the assignment syntax in parentheses\n(fave_squared <- fave_num^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1764\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n#### Quick Tip\n\nWhen you're in the Console use the up and down arrow keys to call your command history, with the most recent commands being shown first.\n:::\n\n### Naming Conventions\n\nBefore we run more calculations, let's talk about naming objects. For the object `fave_num` we used an underscore to separate the object name. This naming convention is called **snake case**. There are other naming conventions including, but not limited to:\n\n-   `we_used_snake_case`\n-   `someUseCamelCase`\n-   `SomeUseUpperCamelCaseAlsoCalledPascalCase`\n\nChoosing a [naming convention](https://en.wikipedia.org/wiki/Naming_convention_(programming)#:~:text=In%20computer%20programming%2C%20a%20naming,in%20source%20code%20and%20documentation) is a personal preference, but once you choose one, or your collaborative team chooses one - be consistent! A consistent naming convention will increase the readability of your code for others and your future self.\n\n::: {.callout-warning}\n#### Quick Tip\n\nObject names cannot start with a numeric digit and cannot contain certain characters such as commas, space, or hyphens.\n:::\n\n## Running code in an R Script\n\nSo far we've been running code in the Console, let's try running code in an R Script. An R Script is a simple text file. RStudio uses an R Script by copying R commands from text in the file and pastes them into the Console as if you were manually entering commands yourself.\n\n[Full Screen](slides/r_programming_introduction/slides2_coding_in_script.html)\n\n\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"slides/r_programming_introduction/slides2_coding_in_script.html\" style=\"border: 1px solid #2e3846;\"></iframe>\n```\n\n\n\n\n\n!!! INCLUDE AN EXAMPLE HERE as a checkin from the slides!\n\n## Data types and structures in R\n\n!!! INTRO TEXT\n\n[Full Screen](slides/r_programming_introduction/slides3_data_structures.html)\n\n\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"slides/r_programming_introduction/slides3_data_structures.html\" style=\"border: 1px solid #2e3846;\"></iframe>\n```\n\n\n\n\n\n!!! INCLUDE AN EXAMPLE HERE as a checkin from the slides!\n\n\n## R Functions\n\nSo far we've learned some of the basic syntax and concepts of R programming, and how to navigate RStudio, but we haven't done any complicated or interesting programming processes yet. This is where functions come in!\n\n!!! INTRO TEXT\n\n[Full Screen](slides/r_programming_introduction/slides4_functions.html)\n\n\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"slides/r_programming_introduction/slides4_functions.html\" style=\"border: 1px solid #2e3846;\"></iframe>\n```\n\n\n\n\n\n!!! INCLUDE AN EXAMPLE HERE as a checkin from the slides!\n\n### Examples using built-in R functions `mean()` and `read.csv()`\n\nLet's override our weight object with some new values, and this time we'll assign it three dog weights in pounds:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_lb <- c(55, 25, 12)\n```\n:::\n\n\n\n\n::: {.callout-exercise}\n\n**Use the `mean()` function to calculate the mean weight.**\n\nFrom the its Help page, we learned this function will take the mean of a set of numbers. Very convenient! \n\nWe also learned that `mean()` only has one argument we need to supply a value to (`x`). The rest of the arguments have default values.\n\n::: {.callout-answer}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = weight_lb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30.66667\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n::: {.callout-exercise}\n\n**Save the mean to an object called `mean_weight_lb`**\n\n:::: {.callout-hint}\nWhat operator do we use to save values to an object?\n::::\n\n:::: {.callout-answer}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# saving the mean using the assignment operator `<-`\nmean_weight_lb <- mean(x = weight_lb)\n```\n:::\n\n\n\n::::\n:::\n\n::: {.callout-exercise}\n**Update `weight_lb`**\n\nLet's say each of the dogs gained 5 pounds and we need to update our vector, so let's change our object's value by assigning it new values.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_lb <- c(60, 30, 17)\n```\n:::\n\n\n\n\nCall `mean_weight_lb` in the console or take a look at your Global Environment. Is that the value you expected? Why or why not?\n\n:::: {.callout-answer}\n\nPerhaps you expected `mean_weight_lb` to change when you changed `weight_lb`?  It did not!  This demonstrates an important R programming concept: **Assigning a value to one object does not change the values of other objects in R.**\n\n::::\n\n:::\n\nNow that we understand why the object's value hasn't changed - how do we update the value of `mean_weight_lb`? How is an R Script useful for this?\n\nThis lead us to another important programming concept, specifically for R Scripts: **An R Script runs top to bottom.**\n\nThis order of operations is important because if you are running code line by line, the values in object may be unexpected. When you are done writing your code in an R Script, it's good practice to clear your Global Environment and use the `Run` button and select \"Run all\" to test that your R Script successfully runs top to bottom.\n\n### Use the `read.csv()` function to read a file into R\n\nSo far we have learned how to assign values to objects in R, and what a function is, but we haven't quite put it all together yet with real data yet. To do this, we will introduce the function `read.csv()`, which will be in the first lines of many of your future scripts. It does exactly what it says, it reads in a csv file to R.\n\nSince this is our first time using this function, first access the help page for `read.csv()`. This has a lot of information in it, as this function has a lot of arguments, and the first one is especially important - we have to tell it what file to look for. Let's get a file!\n\n\n::: callout-tip\n#### Download a file from the Arctic Data Center\n\n1.  Navigate to this dataset by Craig Tweedie that is published on the Arctic Data Center. [Craig Tweedie. 2009. North Pole Environmental Observatory Bottle Chemistry. Arctic Data Center. doi:10.18739/A25T3FZ8X.](http://doi.org/10.18739/A25T3FZ8X)\n\n2.  Download the first csv file called `BGchem2008data.csv` by clicking the \"download\" button next to the file.\n\n3. Click the \"Upload\" button in your RStudio server file browser.\n\n3. In the dialog box, make sure the destination directory is the `data` directory in your R project, click \"Choose File,\" and locate the `BGchem2008data.csv` file. Press \"OK\" to upload the file.\n\n4. Check your file was successfully uploaded by navigating into your `data` folder in the **Files** pane.\n:::\n\n\nNow we have to tell `read.csv()` how to find the file. We do this using the `file` argument which you can see in the usage section in the help page. In R, you can either use absolute paths (which will start with your home directory `~/`) or paths **relative to your current working directory.** RStudio has some great auto-complete capabilities when using relative paths, so we will go that route. \n\nAssuming you have moved your file to a folder within `training_{USERNAME}` called `data`, and your working directory is your project directory (`training_{USERNAME}`) your `read.csv()` call will look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reading in data using relative paths\nbg_chem_dat <- read.csv(file = \"data/BGchem2008data.csv\")\n```\n:::\n\n\n\n\nYou should now have an object of the class `data.frame` in your environment called `bg_chem_dat`. Check your environment pane to ensure this is true. Or you can check the class using the function `class()` in the console.\n\n::: {.callout-caution icon=false}\n##### Optional Arguments\nNotice that in the Help page there are many arguments that we didn't use in the call above. Some of the arguments in function calls are optional, and some are required. \n\nOptional arguments will be shown in the usage section with a `name = value` pair, with the default value shown. If you do not specify a `name = value` pair for that argument in your function call, the function will assume the default value (example: `header = TRUE` for `read.csv()`). \n\nRequired arguments will only show the name of the argument, without a value. Note that the only required argument for `read.csv()` is `file`.\n:::\n\nYou can always specify arguments in `name = value` form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want `file = \"data/BGchem2008data.csv\"`, since file is the first argument. \n\nIf we explicitly called the `file` argument our code would like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_chem_dat <- read.csv(file = \"data/BGchem2008data.csv\")\n```\n:::\n\n\n\n\n\nIf we wanted to add another argument, say `stringsAsFactors`, we need to specify it explicitly using the `name = value` pair, since the second argument is `header`. \n\nMany R users (including myself) will set the `stringsAsFactors` argument using the following call:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# relative file path\nbg_chem_dat <- read.csv(\"data/BGchem2008data.csv\", stringsAsFactors = FALSE)\n```\n:::\n\n\n\n\n\n::: {.callout-caution icon=false}\n##### Quick Tip\n\nFor functions that are used often, you'll see many programmers will write code that does not explicitly call the first or second argument of a function.\n:::\n\n<!-- ## Working with data frames in R using the Subset Operator `$` -->\n\n<!-- A `data.frame` is a list data structure in R that can represent tables and spreadsheets -- we can think of it as a table. It is a collection of rows and columns of data, where each column has a name and represents a variable, and each row represents an observation containing a measurement of that variable. When we ran `read.csv()`, the object `bg_chem_dat` that we created was a `data.frame`. The columns in a `data.frame` might represent measured numeric response values (e.g., `weight_kg`), classifier variables (e.g., `site_name`), or categorical response variables (e.g., `course_satisfaction`). There are many ways R and RStudio help you explore data frames. Here are a few, give them each a try: -->\n\n<!-- -   Click on the word `bg_chem_dat` in the environment pane -->\n<!-- -   Click on the arrow next to `bg_chem_dat` in the environment pane -->\n<!-- -   Execute `head(bg_chem_dat)` in the Console -->\n<!-- -   Execute `View(bg_chem_dat)` in the Console -->\n\n<!-- Usually we will want to run functions on individual columns in a `data.frame`. To call a specific column, we use the list subset operator `$`.  -->\n\n<!-- Say you want to look at the first few rows of the `Date` column only:  -->\n\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- head(bg_chem_dat$Date) -->\n<!-- ``` -->\n\n<!-- You can also use the subset operator `$` calculations. For example, let's calculated the mean temperature of all the CTD samples. -->\n\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- mean(bg_chem_dat$CTD_Temperature) -->\n<!-- ``` -->\n\n<!-- You can also save this calculation to an object that was created using the subset operator `$`.  -->\n\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- mean_temp <- mean(bg_chem_dat$CTD_Temperature) -->\n<!-- ``` -->\n\n::: callout-tip\n#### Other ways to load tablular data\n\nWhile the base R package provides `read.csv` as a common way to load tabular data from text files, there are many other ways \nthat can be convenient and will also produce a `data.frame` as output. Here are a few:\n\n1. Use the `readr::read_csv()` function from the Tidyverse to load the data file. The `readr` package has a bunch of convenient helpers and handles CSV files in typically expected ways, like properly typing dates and time columns. `bg_chem_dat <- readr::read_csv(\"data/BGchem2008data.csv\")`\n2. Load tabular data from Excel spreadsheets using the `readxl::read_excel()` function.\n3. Load tabular data from Google Sheets using the `googlesheets4::read_sheet()` function.\n:::\n\n## Error messages are your friends\n\nThere is an implicit contract with the computer/scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Pay attention to how you type.\n\nRemember that this is a language, not dissimilar to English! There are times you aren't understood -- it's going to happen. There are different ways this can happen. Sometimes you'll get an error. This is like someone saying 'What?' or 'Pardon'? Error messages can also be more useful, like when they say 'I didn't understand this specific part of what you said, I was expecting something else'. That is a great type of error message. Error messages are your friend. Google them (copy-and-paste!) to figure out what they mean. Note that knowing how to Google is a skill and takes practice - use our [Masters of Environmental Data Science](https://bren.ucsb.edu/masters-programs/master-environmental-data-science) (MEDS) program workshop [Teach Me How to Google](https://ucsb-meds.github.io/teach-me-how-to-google/#1) as a guide.\n\n::: {layout-ncol=2}\n![](images/r_programming_introduction/practicalDev_googleErrorMessage.jpg){width=\"30%\"}\n\n[![](images/r_programming_introduction/meds-teach-me-how-to-google-cover.png){width=\"50%\"}](https://github.com/UCSB-MEDS/teach-me-how-to-google)\n:::\n\nAnd also know that there are errors that can creep in more subtly, without an error message right away, when you are giving information that is understood, but not in the way you meant. Like if I'm telling a story about tables and you're picturing where you eat breakfast and I'm talking about data. This can leave me thinking I've gotten something across that the listener (or R) interpreted very differently. And as I continue telling my story you get more and more confused... So write clean code and check your work as you go to minimize these circumstances!\n\n## R Packages\n\n![Artwork by Allison Horst](images/r_programming_introduction/allison-horst-r-doorway.png){width=\"80%\" fig-align=\"center\"}\n\nR packages are the building blocks of computational reproducibility in R. Each package contains a set of related functions that enable you to more easily do a task or set of tasks in R. There are thousands of community-maintained packages out there for just about every imaginable use of R - including many that you have probably never thought of!\n\nTo install a package, we use the syntax `install.packages(\"packge_name\")`. A package only needs to be installed once, so this code can be run directly in the console if needed. Generally, you don't want to save your install package calls in a script, because when you run the script it will re-install the package, which you only need to do once, or if you need to update the package.\n\n## R Resources\n\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Learning R Resources | -   [Introduction to R](http://www.datacarpentry.org/R-ecology-lesson/01-intro-to-r.html) lesson in [Data Carpentry's R for data analysis](http://www.datacarpentry.org/R-ecology-lesson/) course |\n|                      | -   Jenny Bryan's Stat 545 [course materials](https://stat545.com/r-basics.html)                                                                                                                  |\n|                      | -   [Julie Lowndes' Data Science Training for the Ocean Health Index](http://ohi-science.org/data-science-training/)                                                                              |\n|                      | -   Learn R in the console with [swirl](https://swirlstats.com/)                                                                                                                                  |\n|                      | -   [Programming in R](http://ohi-science.org/data-science-training/programming.html)                                                                                                             |\n|                      | -   [R, RStudio, RMarkdown](http://ohi-science.org/data-science-training/rstudio.html)                                                                                                            |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Community Resources  | -   [NCEAS' EcoDataScience](https://eco-data-science.github.io/)                                                                                                                                  |\n|                      |                                                                                                                                                                                                   |\n|                      | -   [R-Ladies](https://rladies.org/)                                                                                                                                                              |\n|                      |                                                                                                                                                                                                   |\n|                      | -   [rOpenSci](https://ropensci.org/community/)                                                                                                                                                   |\n|                      |                                                                                                                                                                                                   |\n|                      | -   [Minorities in R (MiR)](https://mircommunity.com/)                                                                                                                                            |\n|                      |                                                                                                                                                                                                   |\n|                      | -   Twitter - there is *a lot* here but some hashtags to start with are:                                                                                                                          |\n|                      |                                                                                                                                                                                                   |\n|                      |     -   #rstats                                                                                                                                                                                   |\n|                      |                                                                                                                                                                                                   |\n|                      |     -   #TidyTuesday                                                                                                                                                                              |\n|                      |                                                                                                                                                                                                   |\n|                      |     -   #dataviz                                                                                                                                                                                  |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Cheatsheets          | -   [Base R Cheatsheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf)                                                                                                     |\n|                      | -   [LaTeX Equation Formatting](https://www.caam.rice.edu/~heinken/latex/symbols.pdf)                                                                                                             |\n|                      | -   [MATLAB/R Translation Cheatsheet](http://mathesaurus.sourceforge.net/octave-r.html)                                                                                                           |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n: Awesome R Resources to Check out {tbl-colwidths=\"[20,80]\"}\n\n\n## Clearing the environment\n\nTake a look at the objects in your Environment (Workspace) in the upper right pane. The Workspace is where user-defined objects accumulate. There are a few useful commands for getting information about your Environment, which make it easier for you to reference your objects when your Environment gets filled with many, many objects.\n\n![](images/r_programming_introduction/RStudio_IDE_env.png)\n\nYou can get a listing of these objects with a couple of different R functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobjects()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"fave_num\"       \"fave_squared\"   \"mean_weight_lb\" \"weight_lb\"     \n```\n\n\n:::\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"fave_num\"       \"fave_squared\"   \"mean_weight_lb\" \"weight_lb\"     \n```\n\n\n:::\n:::\n\n\n\n\nIf you want to remove the object named `weight_kg`, you can do this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(weight_kg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in rm(weight_kg): object 'weight_kg' not found\n```\n\n\n:::\n:::\n\n\n\n\nTo remove everything (or click the Broom icon in the Environment pane):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n\n!!! RESTART R\n\n::: {,callout-tip}\n#### Quick Tip\n\nIt's good practice to clear your environment. Over time your Global Environmental will fill up with many objects, and this can result in unexpected errors or objects being overridden with unexpected values. Also it's difficult to read / reference your environment when it's cluttered!\n:::\n\n## Save Workspace Image to .RData?\n\n![](images/r_programming_introduction/save-workspace.png)\n\n**DON'T SAVE**\n\nWhen ever you close or switch projects you will be promped with the question: Do you want to save your workspace image to /\"currente-project\"/ .RData?\n\nRStudio by default wants to save the state of your environment (the objects you have in your environment pane) into the RData file so that when you open the project again you have the same environment. However, as we discussed above, it is good practice to constantly clear and clean your environment. It is generally **NOT** a good practice to rely on the state of your environment for your script to run and work. If you are coding reproducibly, your code should be able to reproduce the state of your environment (all the necessary objects) every time you run it. It is much better to rely on your code recreating the environment than the saving the workspace status.\n\n\nYou can change the Global Options configuration for the default to be NEVER SAVE MY WORKSPACE. Go to Tools > Global Options. Under the General menu, select Never next to \"Save workspace to .RData on exit\". This way you won't get asked every time you close a project, instead RStudio knows not to save.\n\n!!! WHY WOULD YOU DO THIS? REPRODUCIBILITY\n\n![](images/r_programming_introduction/save-workspace-global-options.png)\n\n\n## Logical operators and expressions\n\nWe can ask questions about an object using **logical operators and expressions**. Let's ask some \"questions\" about the `weight_lb` object we made.\n\n-   `==` means 'is equal to'\n-   `!=` means 'is not equal to'\n-   `<` means 'is less than'\n-   `>` means 'is greater than'\n-   `<=` means 'is less than or equal to'\n-   `>=` means 'is greater than or equal to'\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# examples using logical operators and expressions\nweight_lb == 2\nweight_lb >= 30\nweight_lb != 5\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}