{
  "hash": "516e421827bb29e8941ad385f5b3516d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\n---\n\n\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Working with R & RStudio]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n\n::: {.column width=\"50%\"}\n[**NCEAS Learning Hub**]{.custom-subtitle2}<br>\n[coreR]{.custom-subtitle2}<br>\n[May 2025]{.custom-subtitle3}\n:::\n\n---\n\n::: callout-tip\n### Creating an R Script\n\n1.  From the \"File\" menu, select \"New File\"\n2.  Click \"R Script\" from the list of options\n\nRStudio should open your R Script automatically after creating it. Notice a new pane appears above the Console. This is called the **Source pane** and is where we write and edit R code and documents. This pane is only present if there are files open in the editor.\n\n3.  Save the R Script in your `script` folder, name the file `intro_to_programming.R`\n:::\n\n---\n\n### How to run code in an R Script\n\nRunning code in an R Script is different than running code in the Console (aka you can't just press `return` / `enter`). To interpret and run the code you've written, R needs you to send the code from the script (or editor) to the Console. Some common ways to run code in an R Script include:\n\n1.  Place your cursor on the line of code you want to run and use the shortcut `command` + `return` or click the `Run` button in the top right of the Source pane.\n\n2.  Highlight the code you want to run, then use the shortcut `command` + `return` or click the `Run` button.\n\n---\n\n### R calculations with objects\n\nSo we know that objects are how R stores information, and we know we create objects using the assignment operator `<-`. Let's build upon that and learn how to use an object in calculations.\n\nImagine we have the weight of a dog in kilograms. Create the object `weight_kg` and assign it a value of 25.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n---\n\nNow that R has `weight_kg` saved in the Global Environment, we can run calculations with it.\n\n::: {.callout-exercise}\n\n**Using `weight_kg` run a simple calculation**\n\nLet's convert the weight into pounds. Weight in pounds is 2.2 times the weight in kg.\n\n::: {.callout-answer}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n:::\n\n\n:::\n\n---\n\n:::\n\nYou can also store more than one value in a single object. Storing a series of weights in a single object is a convenient way to perform the same operation on multiple values at the same time. One way to create such an object is with the function `c()`, which stands for combine or concatenate.\n\nFirst let's create a **vector** of weights in kilograms using `c()` (we'll talk more about vectors in the next section, [Data structures in R](#data_structures)).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 33 12\n```\n\n\n:::\n:::\n\n\n\n---\n\nNow convert the vector `weight_kg` to pounds.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55.0 72.6 26.4\n```\n\n\n:::\n:::\n\n\n\n---\n\nWouldn't it be helpful if we could save these new weight values we just converted? This might be important information we may need for a future calculation. How would you save these new weights in pounds?\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55.0 72.6 26.4\n```\n\n\n:::\n:::\n\n\n\n---\n\n::: {,callout-tip}\n#### Quick Tips\n\nYou will make many objects and the assignment operator `<-` can be tedious to type over and over. Instead, use **RStudio's keyboard shortcut: `option` + `-` (the minus sign)**.\n\nNotice that RStudio automatically surrounds `<-` with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces.\n\nRStudio offers many handy [keyboard shortcuts](https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts). Also, `option`+`Shift`+`K` brings up a keyboard shortcut reference card.\n\nFor more RStudio tips, check out Master of Environmental Data Science (MEDS) workshop: [IDE Tips & Tricks](https://ucsb-meds.github.io/IDE-tips-and-tricks/#/title-slide).\n:::\n",
    "supporting": [
      "slides2_coding_in_script_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}