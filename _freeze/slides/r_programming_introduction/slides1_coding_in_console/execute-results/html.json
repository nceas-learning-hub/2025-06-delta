{
  "hash": "0ded77ae56b67acf238bb6437120ad8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\n---\n\n\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Working with R & RStudio]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n\n::: {.column width=\"50%\"}\n[**NCEAS Learning Hub**]{.custom-subtitle2}<br>\n[coreR]{.custom-subtitle2}<br>\n[May 2025]{.custom-subtitle3}\n:::\n\n---\n\n\n##  {#welcom-to-r data-menu-title=\"Welcome to R Programming\"}\n\n[Using R within the RStudio IDE]{.slide-title}\n\n<!-- R and RStudio icons here -->\n\n- R is a great language to learn data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source!\n- RStudio is a great integrated development environment (IDE) that lets you run R while accessing files, variable values, help screens, and much more!\n\n\n---\n\n##  {#r-rstudio data-menu-title=\"Difference between R and RStudio\"}\n\n[Cooking up data science with R and RStudio!]{.slide-title}\n\n<!--coding as cooking metaphor; Allison's drawing here-->\n\n::: {.body-text .center-text}\n![Artwork by Allison Horst](images/allison-horst-code-kitchen.png){width=60%}\n:::\n\n::: {.body-text}\n- **R is a knife**. You have food to prepare, and the knife is one of the most important tools you’ll use to accomplish your task.\n- **RStudio is the kitchen**. RStudio provides a place to do your work!\n- **Data are your ingredients**.  We'll clean, slice, dice, and remix our data into actionable science!\n:::\n\n---\n\n##  {#rstudio-ide data-menu-title=\"RStudio IDE\"}\n\n[RStudio IDE interface]{.slide-title}\n\n<hr>\n\n::: {.body-text}\nLet’s take a tour of the RStudio interface.\n:::\n  \n::: {.body-text .center-text}\n![](images/RStudio_IDE.png){width=80%}\n:::\n  \nNotice the default panes:\n\n-   Console (entire left)\n-   Environment/History (tabbed in upper right)\n-   Files/Plots/Packages/Help (tabbed in lower right)\n\n::: {.body-text .center-text}\n**Quick Tip:** You can change the default location of the panes, among many other things. More information [here](https://support.posit.co/hc/en-us/articles/200549016-Customizing-the-RStudio-IDE)\n:::\n\n---\n\n## Coding in the Console\n\n::: callout-important\n### But first, an important first question: **where are we?**\n\nIf you've just opened RStudio for the first time, you'll be in your Home directory. This is noted by the `~/` at the top of the console. You can see too that the Files pane in the lower right shows what is in the Home directory where you are. You can navigate around within that Files pane and explore, but note that you won't change where you are: even as you click through you'll still be Home: `~/`.\n\n![](images/r_programming_introduction/RStudio_IDE_homedir.png){width=\"80%\" fig-align=\"center\"}\n:::\n\nWe can run code in a couple of places in RStudio, including the Console, let's start there.\n\nAt it's most basic, we can use R as a calculator, let's try a couple of examples in the console.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.callout-caution icon=\"false\"}\n#### Quick Tip\n\nWhen you're in the console you'll see a greater than sign (`>`) at the start of a line. This is called the \"prompt\" and when we see it, it means R is ready to accept commands. If you see a plus sign (`+`) in the Console, it means R is waiting on additional information before running. You can always press escape (`esc`) to return to the prompt. Try practicing this by running `3*` (or any incomplete expression) in the console.\n:::\n\n\n---\n\n## {#example-code-slide data-menu-title=\"Example Code\"}\n\n[Example Code]{.slide-title}\n\n<hr>\n\n::: {.body-text}\nCreating an object\n:::\n\n```r\n# think of this code as someone saying \"important_value gets a value of 12\".\nimportant_value <- 3*4\n```\n\n---\n\nWhile there are many cases where it makes sense to type code directly in to the the console, it is not a great place to write most of your code since you can't save what you ran. **A better way is to create an R Script, and write your code there.** Then when you run your code from the script, you can save it when you are done. We're going to continue writing code in the Console for now, but we'll code in an R Script later in this lesson\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}