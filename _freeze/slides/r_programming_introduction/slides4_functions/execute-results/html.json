{
  "hash": "c9c67df61a359d1266810d95fe9cd878",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\n---\n\n\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Working with R & RStudio]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n\n::: {.column width=\"50%\"}\n[**NCEAS Learning Hub**]{.custom-subtitle2}<br>\n[coreR]{.custom-subtitle2}<br>\n[May 2025]{.custom-subtitle3}\n:::\n\n---\n\n**A function is a way to group a set of commands together to undertake a task in a reusable way.** When a function is executed, it produces a return value. We often say that we are \"calling\" a function when it is executed. Functions can be user defined and saved to an object using the assignment operator, so you can write whatever functions you need, but R also has a mind-blowing collection of built-in functions ready to use. To start, we will be using some built in R functions.\n\n**All functions are called using the same syntax:** function name with parentheses around what the function needs in order to do what it was built to do. These \"needs\" are pieces of information called arguments, and are required to return an expected value.\n\n::: {.callout-caution icon=false}\n### Syntax of a function will look something like:\n\n```\nresult_value <- function_name(argument1 = value1, argument2 = value2, ...)\n```\n:::\n\n---\n\nBefore we use a function, let's talk about Help pages.\n\n## Getting help using help pages\n\nWhat if you know the name of the function that you want to use, but don't know exactly how to use it? Thankfully RStudio provides an easy way to access the help documentation for functions.\n\nThe next function we're about to use is the `mean()` function. \n\nTo access the help page for `mean()`, enter the following into your console:\n\n\n\n::: {.cell}\n\n:::\n\n\n\nThe Help pane will show up in the lower right hand corner of your RStudio.\n\nThe Help page is broken down into sections:\n\n-   Description: An extended description of what the function does.\n-   Usage: The arguments of the function(s) and their default values.\n-   Arguments: An explanation of the data each argument is expecting.\n-   Details: Any important details to be aware of.\n-   Value: The data the function returns.\n-   See Also: Any related functions you might find useful.\n-   Examples: Some examples for how to use the function.\n\nAnd there's also help for when you only sort of remember the function name: double-question mark:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n---\n\n::: {.callout-caution icon=false}\n#### Not all functions have (or require) arguments\n\nCheck out the documentation or Help page for `date()`.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n:::\n\n---\n\n!!!packages?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}