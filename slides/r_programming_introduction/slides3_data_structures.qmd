---
format: 
  revealjs:
    slide-number: true
    code-link: true
    highlight-style: a11y
    chalkboard: true
    theme:
      - lh_slides_style.scss ### this lives in folder with slide qmd file
---

## {#title-slide data-menu-title="Title Slide"} 

[Working with R & RStudio]{.custom-title}

[An introduction to programming in R]{.custom-subtitle}

<hr class="hr-red">


::: {.column width="50%"}
[**NCEAS Learning Hub**]{.custom-subtitle2}<br>
[coreR]{.custom-subtitle2}<br>
[May 2025]{.custom-subtitle3}
:::

---

| Data Type                         | Definition                                                                                                                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `boolean` (also called `logical`) | Data take on the value of either `TRUE`, `FALSE`, or `NA`. `NA` is used to represent missing values.                                                                                                                                   |
| `character`                       | Data are string values. You can think of character strings as something like a word (or multiple words). A special type of character string is a `factor`, which is a string but with additional attributes (like levels or an order). |
| `integer`                         | Data are whole numbers (those numbers without a decimal point). To explicitly create an integer data type, use the suffix `L` (e.g. `2L`).                                                                                             |
| `numeric` (also called `double`)  | Data are numbers that contain a decimal.                                                                                                                                                                                             |
: Common data types in R {tbl-colwidths="[25,75]"}


| Data Type | Definition                                              |
|-----------|---------------------------------------------------------|
| `complex` | Data are complex numbers with real and imaginary parts. |
| `raw`     |  Data are raw bytes.                                    |

: Less common data types (we won't be going into these data types this course) {tbl-colwidths="[25,75]"}

---

We've been using primarily `integer` or `numeric` data types so far. Let's create an object that has a string value or a `character` data type.

```{r}
science_rocks <- "yes it does!"
```

"yes it does!" is a string, and R knows it's a word and not a number because it has quotes `" "`. You can work with strings in your data in R easily thanks to the [`stringr`](http://stringr.tidyverse.org/) and [`tidytext`](https://github.com/juliasilge/tidytext) packages.

---

**This lead us to an important concept in programming:** As we now know, there are different "classes" or types of objects in R. The operations you can do with an object will depend on what type of object it is because each object has their own specialized format, designed for a specific purpose. This makes sense! Just like you wouldn't do certain things with your car (like use it to eat soup), you won't do certain operations with character objects (strings).

Also, everything in R is an object. An object is a variable, function, data structure, or method that you have written to your environment.

Try running the following line in your script:

```{r}
#| eval: false
"Hello world!" * 3
```

What happened? What do you see in the Console? Why?

---

::: {,callout-tip}
### Quick Tip

You can see what data type or class an object is using the `class()` function, or you can use a logical test such as: `is.numeric()`, `is.character()`, `is.logical()`, and so on.

```{r}
#| eval: false
class(science_rocks) # returns character
is.numeric(science_rocks) # returns FALSE
is.character(science_rocks) # returns TRUE
```
:::

---

## Data structures in R {#data_structures}

Okay, now let's talk about vectors.

**A vector is the most common and most basic data structure in R**. Vectors can be thought of as a way R stores a collection of values or elements. Think back to our `weight_lb` vector. That was a vector of  three elements each with a data type or class of `numeric`.

What we're describing is a specific type of vector called **atomic vectors**. To put it simply, atomic vectors *only* contain elements of the *same* data type. Atomic vectors are very common.

Vectors are foundational for other data structures in R, including data frames, and while we won't go into detail about other data structures there are great resources online that do. We recommend the chapter [Vectors](https://adv-r.hadley.nz/vectors-chap.html) from the online book [Advanced R](https://adv-r.hadley.nz/index.html) by Hadley Wickham.

```{r}
# atomic vector examples #
# character vector
chr_vector <- c("hello", "good bye", "see you later")
# numeric vector
numeric_vector <- c(5, 1.3, 10)
# logical vector
boolean_vector <- c(TRUE, FALSE, TRUE)
```

---

dataframes? load a built-in example

---

## Working with data frames in R using the Subset Operator `$`

A `data.frame` is a list data structure in R that can represent tables and spreadsheets -- we can think of it as a table. It is a collection of rows and columns of data, where each column has a name and represents a variable, and each row represents an observation containing a measurement of that variable. When we ran `read.csv()`, the object `bg_chem_dat` that we created was a `data.frame`. The columns in a `data.frame` might represent measured numeric response values (e.g., `weight_kg`), classifier variables (e.g., `site_name`), or categorical response variables (e.g., `course_satisfaction`). There are many ways R and RStudio help you explore data frames. Here are a few, give them each a try:

-   Click on the word `bg_chem_dat` in the environment pane
-   Click on the arrow next to `bg_chem_dat` in the environment pane
-   Execute `head(bg_chem_dat)` in the Console
-   Execute `View(bg_chem_dat)` in the Console

Usually we will want to run functions on individual columns in a `data.frame`. To call a specific column, we use the list subset operator `$`. 

Say you want to look at the first few rows of the `Date` column only: 

```{r}
#| eval: false
head(bg_chem_dat$Date)
```

You can also use the subset operator `$` calculations. For example, let's calculated the mean temperature of all the CTD samples.

```{r}
#| eval: false
mean(bg_chem_dat$CTD_Temperature)
```

You can also save this calculation to an object that was created using the subset operator `$`. 

```{r}
#| eval: false
mean_temp <- mean(bg_chem_dat$CTD_Temperature)
```


---


matrices? arrays?
